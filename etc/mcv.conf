#    Copyright 2015-2016 Mirantis, Inc
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

#
# MCVConsoler configuration file
#

#
# The 'basic' section is the common section for general options for
# MCVConsoler.
#
[basic]
#
# Option 'auth_protocol' determines whether your cloud supports SSL endpoints.
#
# Possible values:
#     * http  - for clouds without SSL endpoints
#     * https - for clouds with SSL endpoints
#
# By default, MCV assumes that cloud has SSL endpoints.
# In future releases, this option will be removed to be obtained automatically.
#
# NOTE: if not all of endpoints in your cloud are SSL-based, the behaviour of
# MCV is undefined.
#
auth_protocol=https
#
#
# Option 'mos_version' is required to run OSTF or BigData workload tests.
# It specifies the version of your MOS cloud.
#
# Possible values:
#
# +-------+---------+------+
# |       |         |      |
# | Value | BigData | OSTF |
# |       | (NoSSL) |      |
# +-------+---------+------+
# |  6.1  |    -    |  +   |
# |-------|---------|------|
# |  7.0  |    +    |  +   |
# |-------|---------|------|
# |  8.0  |    +    |  +   |
# |-------|---------|------|
# |  9.0  |    -    |  +   |
# +-------+---------+------+
#
# Hint: to obtain this value from your cloud, please log into Fuel Master Node
#       and run:
#
#       $ fuel --version
#
mos_version=8.0
#
#
#
# Option 'instance_ip' stands for IP of MCV host.
# Regarding to the way of running MCV, it equals one of next possible values:
#
# +-------------------------+-------------+
# |   Way to run            |    Value    |
# +-------------------------+-------------+
# | As an instance in cloud | floating IP |
# |-------------------------|-------------|
# | Host within L2 segment  | public IP   |
# |-------------------------|-------------|
# | Host within L3 segment  | public IP   |
# +-------------------------+-------------+
#
# Read more about network settings here:
#     * https://mirantis.jira.com/wiki/display/MCV/Booting+MCV+image+outside+the+cloud+-+L2+segment
#
# WARNING: Be careful in setting up this option. If you run MCVConsoler with
#          incorrect instance_ip - it may cause issues:
#
#          * an invalid security group might be created in cloud (if you run
#            MCV as an instance)
#          * Shaker on MCV will be configured incorrectly, so you won't be
#            able to run Shaker tests until issues with Shaker container are
#            fixed
#
# NOTE: Default value of this option is not usable - please set correct value
#       by yourself!
#
instance_ip=127.0.0.1
#
# Option 'log_config' defines a path to the logging configuration file
#
log_config=/etc/mcv/logging.yaml
#
# Option 'hide_ssl_warnings' allows to enable/disable urllib3 warnings
#
# Possible values:
#
#     * False - enable urllib3 warnings
#     * True  - disable urllib3 warnings
#
# By default, this option is set to True.
#
hide_ssl_warnings=True
#
# Option 'scenario' defines a path to the custom tests scenario file
#
scenario=/etc/mcv/scenario.yaml
#

#
# Section 'fuel' describes options required for access to Fuel Master Node.
# It's needed for next reasons:
#
#     * Running MCV in L3 segment, you'll need this to get access to the cloud
#     * For any way of running MCV if you want to run MCV OSTF suites

[fuel]
#
#
# Next options stand for credentials to access Fuel Master Node by SSH.
# By default, they're set to values usually used as default in any Mirantis
# OpenStack distributive.
#
username=root
password=r00tme
#
# Option 'nailgun_host' stands for accessible IP of Fuel Master Node.
#
# If you run MCV in L3 segment, it must be its public IP. For L2 segment,
# you can use IP from admin network. In case of running MCV as an instance,
# you'll probably don't have access to Fuel Master Node.
#
# Besides running in L3 segment, this option is also used for extracting
# configuration for OSTF from Nailgun. If you don't have direct access to
# Fuel Master Node from MCV host (if you run MCV as an instance, for example),
# you'd need to generate it manually. Please read this article for details:
#   https://mirantis.jira.com/wiki/display/MCV/Extract+config+for+OSTF+manually
#
nailgun_host=10.20.0.2
#
# Option 'cluster_id' stands for ID of cluster on Fuel to be tested.
# It's required to run OSTF tests only.
# To obtain this option, please run next command on your Fuel Master Node:
#
# $ fuel env
# And get the correct value from column 'id' in the output.
#
cluster_id=1
#
# Option 'ssh_cert' stands for the path to private id_rsa key on Fuel Master
# Node, so Consoler will be able to get it and store on MCV host.
# This option is required for L3 segment only!
#
ssh_cert=/root/.ssh/id_rsa
#

#
# Section 'auth' describes options used for direct access to cloud using
# credentials. This way is the only one in case you run MCV as an instance
# or in L2 segment. For L3 segment, you can omit this session.
[auth]
#
# Next options are equivalents of OS_USERNAME, OS_PASSWORD, OS_TENANT_NAME
# and OS_REGION_NAME
# in your cloud.
#
# Hint: you can get those values on any of your controller nodes at
# /root/openrc
# By default, these options are set to values default for Mirantis OpenStack.
os_username=admin
os_tenant_name=admin
os_password=admin
region_name=RegionOne
#
#
# Option 'auth_endpoint_ip' is a public endpoint of your cloud.
#
# Hint: you can find this value by running next command on your controller:
#     $ keystone endpoint-list
#
# If you've got publicURL with domain alias instead of IP (like
# 'public.fuel.local'), you can do on the same controller:
#     $ cat /etc/hosts | grep <alias>
#
# WARNING: Please set this option to correct value - don't use a default one!
auth_endpoint_ip=1.1.1.3
#
#
# Option 'auth_fqdn' is used if you have endpoints set using domain aliases.
# You can obtain this value by running command on controller:
#     $ cat /etc/hosts
#
# By default, this option is set to value default for Mirantis OpenStack.
#
auth_fqdn=public.fuel.local
#
#
# Next options are required if you run MCV as an instance. Please read
#     https://mirantis.jira.com/wiki/display/MCV/Limitations
# in section 'Common known issues' for details.
#
# Please make sure you set option "PasswordAuthentication yes" in
# /etc/ssh/sshd_config on this controller!
#
# WARNING: option 'controller_ip' is set to fake value - please set it
# manually!
controller_ip=1.1.1.4
#
# Option 'controller_uname' stands for username to log into specified
# controller by SSH. By default, it's set to value default for Mirantis
# OpenStack.
controller_uname=root
#
# Option 'controller_pwd' stands for password to log into specified
# controller by SSH. By default, it's set to value default for Mirantis
# OpenStack.
controller_pwd=r00tme
#
#
# Option 'ssh_key' provides a common place for SSH key to access cloud nodes.
# This option is required if you want to run tests for Network Speed between
# hardware nodes of your cloud.
#
# NOTE: By default, MCV stands to use private key from Fuel Master Node.
#       However, you can use any customly generated SSH key regarding to
#       possible security reasons or restrictions in your company.
#
# If you run MCV in L3 segment, this key is extracted automatically from Fuel
# Master Node and saved to this path. In other cases, you have to put this key
# manually by path specified.
#
# FIXME(dbgoun): fix or remove (broken after https://gerrit.mirantis.com/61611)
# NOTE(albartash): Do not store this key after finishing up with tests,
#                  or store it not in result folder.
#ssh_key=/home/mcv/id_rsa
#

#
# Plugins configuration
#

#
# Configuration for Rally plugin
#
[rally]
#
# Please do not change this option unless you've implemented your own Rally
# plugin for MCV.
#
runner=RallyOnDockerRunner
# Concurrency for Rally's benchmark scenarios
#
# Some specific options to configure Rally.
concurrency=5
vlan_amount=1
gre_enabled=False
#
# Next option limits how many tests are allowed to fail during test running
# of this plugin.
max_failed_tests=10
#
# Network name to be used by Rally for launching instances.
# The default value is set for MOS 8.0+.
#
network_name=admin_internal_net
#
# If you want to create user for rally test manually, you should set
# this option to True.
# To run tests this way you should have in your cloud user with credentials:
#   username: rally
#   password: rally
#   tenant_name: rally
# WARNING: Make sure that tenant 'rally' is created just now, because rally
# cleanups all resources, which belongs to specified tenant
# Clouds with LDAP need this option because you should have registered in LDAP user.
existing_users=False

#
# Configuration for Rally Certification Task.
# You can either set these options to specific values, or left them default.
#
# These options can also be seen at
#     https://github.com/openstack/rally/blob/master/certification/openstack/task_arguments.yaml
#
[certification]
#
# List of services to be tested
services=authentication,neutron,cinder,glance,nova,keystone
#
# Amount of controllers to be used during testing
controllers_amount=1
#
# Amount of computes to be used during testing
computes_amount=2
#
# Amount of storages to be used during testing
storage_amount=1
#
# Amount of tenants to be used during testing
tenants_amount=1
#
# Amount of users to be used during testing
users_amount=1
#
# Amount of networks to be used during testing
network_amount=1
#

#
# Configuration for Rally Workload Tests.
# Includes configuration for SaaS Workload Tests and BigData Workload Tests.
#
# Warning: BigData Workload Tests will not work on clouds with SSL.
#          This issue is going to be fixed in future releases of Rally.
#
[workload]
#
# Configuration for SaaS Workload Tests
#
# Amount of instances to be used during testing
instance_count=2
#
# Concurrency for Rally's Workload
concurrency=1
#
#
# Configuration for BigData Workload Tests.
#
# File size for BigData Workload
# Specified in Kb, recommended value is 10000000
file_size=10000
#
# Amount of workers
workers_count=3
#
#
# Test flavor configuration
#
# Amount of RAM
ram=8096
#
# Size of HDD
disc=20
#
# Amount of CPUs to be used
vcpu=4
#

#
# Configuration for Tempest plugin.
# Tempest tests will be run using Rally.
#
[tempest]
#
# Please do not change this option unless you've implemented your own Tempest
# plugin for MCV.
#
runner=TempestOnDockerRunner
#
# Next option limits how many tests are allowed to fail during test running
# of this plugin.
#
# NOTE: For Tempest, this option descibes amount of failed tests - don't mix
#       up with test suites (the way we run Tempest)!
#
max_failed_tests=100
#

#
# Configuration for OSTF plugin.
# OSTF plugin runs OSTF tests from within MCV, not from Fuel Master Node.
#
[ostf]
#
# Please do not change this option unless you've implemented your own OSTF
# plugin for MCV.
#
runner=OSTFOnDockerRunner
#
# Next option limits how many tests are allowed to fail during test running
# of this plugin.
max_failed_tests=10
#

#
# Configuration for Resource plugin.
# Resource plugin will check resources of cloud.
#
[resources]
#
# Please do not change this option unless you've implemented your own
# Resource plugin for MCV.
#
runner=ResourceReportRunner
#
# Next option limits how many tests are allowed to fail during test running
# of this plugin.
max_failed_tests=1
#

#
# Configuration for Shaker plugin.
# Shaker plugin uses Shaker tool for measuring network speed between VMs.
#
[shaker]
#
# Please do not change this option unless you've implemented your own Shaker
# plugin for MCV.
#
runner=ShakerOnDockerRunner
#
# Determines whether to do cleanup after Shaker running or not.
# Usually, setting cleanup=False is used only for debugging, so you can left
# it as-is.
cleanup=True
#
# Timeout for waiting until Shaker scenario is finished.
# If scenario has not been completed before timeout event happened, the task
# will be interrupted.
# Value of this option is set in seconds.
timeout=1200
#
# Timeout to treat shaker-agents as lost in seconds
# Sometimes we need set more time for connect from agents to server
# (when we have a bad connection from cloud to mcv)
# Value of this option is set in seconds.
agents_timeout=60
#
# Next option limits how many tests are allowed to fail during test running
# of this plugin.
max_failed_tests=1
#
# Image name for Shaker in Glance.
image_name=shaker-image
#
# Flavor name to be used for Shaker image in cloud.
flavor_name=shaker-flavor
#

#
# Configuration for Network Speed Tests.
# These tests are provided as Shaker scenarios and also by using
# NWSpeed plugin (for measuring speed between hardware nodes).
#
[network_speed]
#
# Threshold of network speed specified in Gb/s.
# If no value specified, MCV will take the default value from its config
#
threshold=7
#
# Name of private network in cloud.
# The default value for this option is a name of such network in default MOS
# 8.0+ configuration.
network_name=admin_internal_net
#
# Network name to be used by Shaker and Speed plugins for tests.
# By default, if this value is not presented, They will pick up the first
# available network from the cloud automatically. It's recommended to leave
# this option commented if your cloud does not have a very complicated
# networking.
# The default value presented for this option here is the name of such network
# for MOS 8.0+.
network_ext_name=admin_floating_net
#

#
# Configuration for Speed plugin.
#
[speed]
#
# Please do not change this option unless you've implemented your own
# Speed plugin for MCV.
runner=SpeedTestRunner
#
# Next option stands for host aggregations in cloud. For
# most of MOS clouds, you can use it to specify and
# availability zone for nodes. In more specific cases,
# this option describes a host aggregate which will be tested via MCV Speed tests.
#
# You can get a list of availablity zones by running a command:
#   $ nova availability-zone-list
#
# If your cloud uses host aggregates, please run another command:
#   $ nova aggregate-list
#
# By default, this option is set to default availability zone on vanilla MOS clouds.
#
availability_zone=nova
#
# Path to image on MCV host used for measuring speed.
# You should leave it as-is unless you want to run MCV using a custom image.
speed_image_path=/home/mcv/toolbox/rally/images/Fedora-Cloud-Base-23-20151030.x86_64.qcow2
#
# Flavor requirements.
# This flavor will be used by Speed tests
# Supported params: ram, vcpus, disk
flavor_req=ram:1024,vcpus:1,disk:0
#
# Test image/volume size specified in Gb (G) or Mb (M).
# If options are commented, a default value will be picked up.
image_size=1G
#
volume_size=1G
#
# Threshold of storage speed specified in Mb/s
threshold=50
#
# Next option limits how many tests are allowed to fail during test running
# of this plugin.
max_failed_tests=2
#
# Limit of compute nodes quantity to be used for measuring speed.
# If this option is not defined, speed will be measured on all compute nodes.
#compute_nodes_limit=2
#
# Limit attempts for each write(upload)/read(download) iteration.
# If this option is not defined, a default value will be used
attempts=3
#

#
# Configuration for NWSpeed plugin.
# This plugin provides functionality of measuring speed between hardware nodes.
#
[nwspeed]
#
# Please do not change this option unless you've implemented your own NWSpeed
# plugin for MCV.
#
runner=NWSpeedTestRunner
#
# Speed threshold specified in Mb\s.
# If this option is not defined, a default value will be used.
threshold=100
#
# Option 'range' describes possible range of speed deviation of the average
# value. Specified in percents.
# If this value is not set, a default value will be used.
range=30
#
# Port in admin network for testing network speed.
# Testing will be done using utility 'nc', and this option provides a port
# number for it.
# By default, NWSpeed plugin tries to access nodes through the default VNC
# port. If this port is not available, you have to specify an open one.
#
# NOTE: This port must be similar on every node.
#
test_port=6003
#
# Data size for testing. Specified in Mb.
# If this option is not set, a default value will be used.
data_size=100
#
# Limit of nodes quantity to be used for measuring speed.
# If this option is not defined, speed will be measured on all nodes.
#nodes_limit=5
#
# Limit of controllers quantity to be used for measuring speed.
# If this option is not defined - speed will be measured for all controllers
#controllers_limit = 3
#
# Speed will be measured on nodes filtered by following role(s)
# If this option is not set - speed will be measured on node with any role
#roles = controller,compute
#
# Number of attempts to be used when measuring speed for each node.
# If this option is not defined, a default value will be used
#attempts=3
#

#
# Configuration for SelfCheck plugin.
# This plugin is used when you need to check your MCV image to be valid and
# ready to be used. It is used on CI stage, so you don't need to run MCV
# self-check commands by yourself if you've got a stable image.
#
[selfcheck]
#
# Please do not change this option unless you've implemented your own SelfCheck
# plugin for MCV.
#
runner=SelfCheckRunner
#

#
# Configuration for Cleanup
#
[cleanup]
#
# Cleanup in MCV project is not really a cleanup. As we cannot be absolutely
# sure that any of resources detected after test run is a garbage, we just show
# the list of suspicious resources to the user to allow him what to clear and
# what to not.
#
# Option 'show_trash' when set to True turns on Cleanup engine in Consoler.
# By default, it is turned off.
#
show_trash=False
#
#
# How long we can store files with list of resources. It allows user to check
# possible garbage not from the last test run only but during all MCV running
# period.
#
days=5
#

#
# Configuration for Test Duration Database.
# MCV provides functionality to store results of test running, so it can be
# saved somewhere or used as ETA for the next run.
#
[times]
#
# Option 'update' checks whether to save results of the last run.
# Possible values:
#
#     * True  - enable results
#     * False - disable saving results
#
# By default, this option is set to True.
# You can get this file on your MCV host at /home/mcv/toolbox/times.json.
update = True
#

#
# Configuration for Quotas
# For set unlimit quotas, please set value to True
#
[quotas]
#
neutron=False
#
